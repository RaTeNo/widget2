import { getElement, createElement } from '../utils/dom.js';
import { ChatMessage } from './ChatMessage.js';
import { InputArea } from './InputArea.js';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞—É–¥–∏–æ (–¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–∞–ø–∫–µ assets/audio/)
const AI_TEST_AUDIO_URL = 'assets/audio/ai-sample.mp3';
const USER_TEST_AUDIO_URL = 'assets/audio/user-sample.mp3';


export class ChatWidget {
    constructor() {
        this.toggleButton = getElement('#aiAssistantToggle');
        this.chatWindow = getElement('#aiAssistantChat');
        this.chatMessagesContainer = getElement('.chat-messages', this.chatWindow);
        this.closeButton = getElement('.chat-header__close-btn', this.chatWindow);
        this.emptyState = getElement('.chat-messages__empty-state', this.chatMessagesContainer);
        this.newMessagesCountSpan = getElement('.new-messages-count', this.chatWindow);

        this.aiAvatar = 'assets/avatar.png'; // –ü—É—Ç—å –∫ –∞–≤–∞—Ç–∞—Ä—É AI. –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ main.js
        this.userAvatar = 'assets/user-avatar.png'; // –ü—É—Ç—å –∫ –∞–≤–∞—Ç–∞—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ main.js

        this.messages = [];
        this.isChatOpen = false;
        this.newMessageCounter = 0;

        this.inputArea = new InputArea('.chat-input-area', this.handleSendMessage.bind(this));

        this.initEventListeners();
        this.updateNewMessagesCount();
    }

    initEventListeners() {
        this.toggleButton.addEventListener('click', () => this.toggleChat());
        document.addEventListener('keydown', (event) => {
            if (event.key === 'Escape' && this.isChatOpen) {
                this.closeChat();
            }
        });
        this.closeButton.addEventListener('click', () => this.closeChat());
    }

    toggleChat() {
        this.isChatOpen = !this.isChatOpen;
        this.chatWindow.setAttribute('aria-hidden', !this.isChatOpen);
        this.toggleButton.setAttribute('aria-expanded', this.isChatOpen);

        if (this.isChatOpen) {
            this.chatWindow.focus();
            this.newMessageCounter = 0;
            this.updateNewMessagesCount();
            this.scrollToBottom();
            this.toggleButton.style.opacity = '0';
            this.toggleButton.style.transform = 'scale(0.5)';
            this.toggleButton.style.pointerEvents = 'none';
        } else {
            this.toggleButton.style.opacity = '1';
            this.toggleButton.style.transform = 'scale(1)';
            this.toggleButton.style.pointerEvents = 'all';
        }
    }

    openChat() {
        if (!this.isChatOpen) {
             this.toggleChat();
        }
    }

    closeChat() {
        if (this.isChatOpen) {
            this.toggleChat();
        }
    }

    addMessage(type, content = null, avatar, showFeedback = false, audioUrl = null, audioDuration = null) {
        const timestamp = new Date();
        const message = new ChatMessage(type, content, timestamp, avatar, showFeedback, audioUrl, audioDuration);
        this.messages.push(message);
        this.chatMessagesContainer.appendChild(message.element);

        if (this.messages.length > 0 && this.emptyState) {
            this.emptyState.style.display = 'none';
        }

        this.scrollToBottom();

        if (!this.isChatOpen && type === 'ai') {
            this.newMessageCounter++;
            this.updateNewMessagesCount();
        }
    }

    handleSendMessage(messageData) {
        let isUserAudioMessage = false;

        if (typeof messageData === 'string') {
            this.addMessage('user', messageData, this.userAvatar);
        } else if (messageData && messageData.audioUrl) {
            this.addMessage('user', null, this.userAvatar, false, messageData.audioUrl, messageData.audioDuration);
            isUserAudioMessage = true;
        }

        const typingPlaceholder = this.addTypingIndicator();

        const responseDelay = Math.random() * (5000 - 3000) + 3000; // –û—Ç 3 –¥–æ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            this.removeTypingIndicator(typingPlaceholder);
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∞—É–¥–∏–æ, AI –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–º (–ø–æ–∫–∞ —á—Ç–æ)
            // –ò–Ω–∞—á–µ, AI —á–µ—Ä–µ–¥—É–µ—Ç –æ—Ç–≤–µ—Ç—ã
            if (isUserAudioMessage) {
                const aiResponse = this.generateAiResponse("–ù–∞ –≤–∞—à–µ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ"); 
                this.addMessage('ai', aiResponse, this.aiAvatar, true);
            } else {
                const totalAiTextMessages = this.messages.filter(msg => msg.type === 'ai' && msg.content).length;
                // –ß–µ—Ä–µ–¥—É–µ–º: —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç
                if (totalAiTextMessages % 2 === 0) { 
                    const aiResponse = this.generateAiResponse(typeof messageData === 'string' ? messageData : '');
                    this.addMessage('ai', aiResponse, this.aiAvatar, true);
                } else {
                    this.addMessage('ai', null, this.aiAvatar, false, AI_TEST_AUDIO_URL, null); // null –¥–ª—è audioDuration
                    console.log(`AI –æ—Ç–≤–µ—Ç–∏–ª —Ä–µ–∞–ª—å–Ω—ã–º –∞—É–¥–∏–æ.`);
                }
            }
        }, responseDelay);
    }

    addTypingIndicator() {
        const typingMessage = createElement('div', ['chat-message', 'chat-message--ai']);
        const avatarDiv = createElement('div', ['chat-message__avatar']);
        const avatarImg = createElement('img', [], { src: this.aiAvatar, alt: '–ê–≤–∞—Ç–∞—Ä AI' });
        avatarDiv.appendChild(avatarImg);

        const bubbleContainer = createElement('div');
        const bubble = createElement('div', ['chat-message__bubble']);
        bubble.innerHTML = `
            <div class="typing-indicator">
                <span class="material-icons">webhook</span>
                <span>–ò–ò –¥—É–º–∞–µ—Ç...</span>
            </div>
        `;
        bubbleContainer.appendChild(bubble);

        typingMessage.appendChild(avatarDiv);
        typingMessage.appendChild(bubbleContainer);

        this.chatMessagesContainer.appendChild(typingMessage);
        this.scrollToBottom();
        return typingMessage;
    }

    removeTypingIndicator(indicatorElement) {
        if (indicatorElement && indicatorElement.parentNode) {
            indicatorElement.parentNode.removeChild(indicatorElement);
        }
    }

    generateAiResponse(userMessage) {
        userMessage = userMessage.toLowerCase();
        if (userMessage.includes('–ø—Ä–∏–≤–µ—Ç') || userMessage.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
            return `–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! üöÄ`;
        } else if (userMessage.includes('–∑–≤–æ–Ω–æ–∫') || userMessage.includes('–ø–æ–∑–≤–æ–Ω–∏—Ç—å')) {
            return `–ö–æ–Ω–µ—á–Ω–æ, —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é –∑–≤–æ–Ω–∫–æ–≤. –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤–∞–º –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å?`;
        } else if (userMessage.includes('–ø–∏—Å—å–º–æ') || userMessage.includes('–Ω–∞–ø–∏—Å–∞—Ç—å')) {
            return `–î–∞, –º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞. –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–º—É, –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –∫–ª—é—á–µ–≤—ã–µ –ø—É–Ω–∫—Ç—ã.`;
        } else if (userMessage.includes('–æ—Ç—á—ë—Ç') || userMessage.includes('–æ—Ç—á–µ—Ç')) {
            return `–î–ª—è –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ü–æ –ø—Ä–æ–¥–∞–∂–∞–º, –∞–Ω–∞–ª–∏—Ç–∏–∫–µ, –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ?`;
        } else if (userMessage.includes('—Å–ø–∞—Å–∏–±–æ')) {
            return `–í—Å–µ–≥–¥–∞ –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –µ—â–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è.`;
        } else if (userMessage.length < 5 && userMessage.length > 0) {
             return `–Ø —Ç—É—Ç, —Å–ª—É—à–∞—é –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ! –ß—Ç–æ –µ—â–µ –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å?`;
        }
        else {
            return `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É?`;
        }
    }

    scrollToBottom() {
        this.chatMessagesContainer.scrollTop = this.chatMessagesContainer.scrollHeight;
    }

    updateNewMessagesCount() {
        this.newMessagesCountSpan.textContent = this.newMessageCounter.toString();
        if (this.newMessageCounter > 0 && !this.isChatOpen) {
            this.toggleButton.classList.add('has-new-messages');
        } else {
            this.toggleButton.classList.remove('has-new-messages');
        }
    }
}